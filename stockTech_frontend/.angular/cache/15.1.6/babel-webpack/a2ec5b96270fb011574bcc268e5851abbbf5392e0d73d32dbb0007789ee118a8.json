{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CompanyProfileComponent = class CompanyProfileComponent {\n  constructor(MarketDataService, marketdatasservice, newsService, route) {\n    this.MarketDataService = MarketDataService;\n    this.marketdatasservice = marketdatasservice;\n    this.newsService = newsService;\n    this.y = Array(3).fill(0);\n    this.dtOptions = {};\n    this.code = '';\n    route.params.subscribe(params => {\n      this.code = params[\"trading_code\"];\n    });\n  }\n  ngOnInit() {\n    this.showData();\n    this.renderPieChart();\n    this.renderPieChart2();\n    this.renderDataTable();\n    this.receiveNews();\n    this.receiveFinance().subscribe(data => {\n      this.dtOptions.data = data;\n      this.financialData = data;\n      // console.log(this.financialData);\n    });\n  }\n\n  receiveFinance() {\n    return this.MarketDataService.getFinance();\n  }\n  getData() {\n    return this.marketdatasservice.getProfile();\n  }\n  receiveMarketData() {\n    return this.MarketDataService.getMarketData();\n  }\n  receiveDseIndices() {\n    return this.MarketDataService.getIndices();\n  }\n  receiveNews() {\n    this.newsService.getCompanyNews().subscribe({\n      next: res => {\n        this.newsData = res;\n      },\n      error: e => console.error(e)\n    });\n  }\n  showData() {\n    this.getData().subscribe({\n      next: res => {\n        console.log(res);\n        this.basicData = res;\n      },\n      error: e => console.error(e)\n    });\n  }\n  // renderIndiceGraph(index: string): void {\n  //   this.getProfile(this.code).subscribe((data1) => {\n  //     const data2 = data1[index];\n  //     const data = Object.entries(data2).map(([x, y]) => ({ x: parseInt(x), y: y }));\n  //     this.lineGraph = {\n  //       chart: {\n  //         type: 'area',\n  //         height: '140%',\n  //         width: '100%',\n  //        \n  //       },\n  //       series: [{\n  //         name: 'Index',\n  //         data: data,\n  //       }],\n  //      \n  //      \n  //      \n  //     };\n  //     this.lineGraph.render();\n  //   })\n  // }\n  renderPieChart() {\n    this.getData().subscribe(data => {\n      const categories = ['Institute', 'Foreign', 'Public'];\n      this.graphdata = data;\n      this.pieChart = {\n        chart: {\n          type: 'pie',\n          width: '55%'\n        },\n        theme: {\n          monochrome: {\n            enabled: true\n          }\n        },\n        series: [this.graphdata.Institute, this.graphdata.Foreign, this.graphdata.Public],\n        labels: categories\n      };\n    });\n  }\n  renderPieChart2() {\n    this.getData().subscribe(data => {\n      const categories = ['Authorized Capital: ' + this.graphdata.AuthorizedCap, 'Paid Up Capital: ' + this.graphdata.PaidUpCap];\n      this.graphdata2 = data;\n      this.pieChart2 = {\n        chart: {\n          type: 'pie',\n          width: '70%'\n        },\n        theme: {\n          monochrome: {\n            enabled: true\n          }\n        },\n        series: [this.graphdata.AuthorizedCap, this.graphdata.PaidUpCap],\n        labels: categories\n      };\n    });\n  }\n  renderDataTable() {\n    this.dtOptions = {\n      searching: false,\n      ordering: false,\n      columnDefs: [{\n        width: '90em',\n        targets: 0\n      }, {\n        width: '30em',\n        targets: [1, 2, 3, 4, 5]\n      }],\n      columns: [{\n        title: 'Particulars',\n        data: ''\n      }, {\n        title: '2022',\n        data: '2022'\n      }, {\n        title: '2021',\n        data: '2021'\n      }, {\n        title: '2020',\n        data: '2020'\n      }, {\n        title: '2019',\n        data: '2019'\n      }, {\n        title: '2018',\n        data: '2018'\n      }]\n    };\n  }\n};\nCompanyProfileComponent = __decorate([Component({\n  selector: 'app-company-profile',\n  templateUrl: './company-profile.component.html',\n  styleUrls: ['./company-profile.component.css']\n})], CompanyProfileComponent);\nexport { CompanyProfileComponent };","map":{"version":3,"mappings":"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","names":["Component","CompanyProfileComponent","constructor","MarketDataService","marketdatasservice","newsService","route","Array","fill","params","subscribe","code","ngOnInit","showData","renderPieChart","renderPieChart2","renderDataTable","receiveNews","receiveFinance","data","dtOptions","financialData","getFinance","getData","getProfile","receiveMarketData","getMarketData","receiveDseIndices","getIndices","getCompanyNews","next","res","newsData","error","e","console","log","basicData","categories","graphdata","pieChart","chart","type","width","theme","monochrome","enabled","series","Institute","Foreign","Public","labels","AuthorizedCap","PaidUpCap","graphdata2","pieChart2","searching","ordering","columnDefs","targets","columns","title","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Codes\\semester 5\\stockTech_frontend\\src\\app\\components\\company-profile\\company-profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { company, MarketDataService } from 'src/app/services/market-data.service';\nimport { ChartOptions } from '../home/home.component';\nimport { TechnicalIndicatorsService } from 'src/app/services/technical-indicators.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { NewsService } from 'src/app/services/news.service';\n\n\n\n\n@Component({\n  selector: 'app-company-profile',\n  templateUrl: './company-profile.component.html',\n  styleUrls: ['./company-profile.component.css']\n})\nexport class CompanyProfileComponent implements OnInit {\n  public lineGraph: Partial<ChartOptions> | any;\n  public pieChart: Partial<ChartOptions> | any;\n  public pieChart2: Partial<ChartOptions> | any;\n  y: number[] = Array(3).fill(0);\n  dtOptions: DataTables.Settings = {};\n  newsData: any;\n  code: string = '';\n  financialData: any;\n  basicData: any;\n  graphdata: any;\n  graphdata2: any;\n  trading_code: any;\n\n  constructor(private MarketDataService: MarketDataService,\n    private marketdatasservice: MarketDataService,\n    private newsService: NewsService,\n    route: ActivatedRoute) { \n      route.params.subscribe((params) => {\n        this.code = params[\"trading_code\"];\n      });\n    }\n\n\n  ngOnInit(): void {\n    this.showData();\n    this.renderPieChart();\n    this.renderPieChart2();\n    this.renderDataTable();\n    this.receiveNews();\n    this.receiveFinance()\n    .subscribe((data) => {\n      this.dtOptions.data = data;\n      this.financialData=data;\n     // console.log(this.financialData);\n    });\n\n  } \n  receiveFinance(): Observable<any> {\n    return this.MarketDataService.getFinance();\n  }\n\n\n  getData(): Observable<any> {\n    return this.marketdatasservice.getProfile();\n  }\n\n\n  receiveMarketData(): Observable<any> {\n    return this.MarketDataService.getMarketData();\n  }\n\n  receiveDseIndices(): Observable<any> {\n    return this.MarketDataService.getIndices();\n  }\n\n  receiveNews(): void {  \n    this.newsService.getCompanyNews()\n      .subscribe({\n        next: (res) => {\n          this.newsData = res;         \n        },\n        error: (e) => console.error(e)\n      });\n  }\n\n\n  showData(): void {\n    this.getData()\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.basicData = res;\n        },\n        error: (e) => console.error(e)\n      });\n  }\n\n\n\n  // renderIndiceGraph(index: string): void {\n\n  //   this.getProfile(this.code).subscribe((data1) => {\n  //     const data2 = data1[index];\n  //     const data = Object.entries(data2).map(([x, y]) => ({ x: parseInt(x), y: y }));\n\n  //     this.lineGraph = {\n  //       chart: {\n  //         type: 'area',\n  //         height: '140%',\n  //         width: '100%',\n  //        \n  //       },\n  //       series: [{\n  //         name: 'Index',\n  //         data: data,\n  //       }],\n  //      \n  //      \n  //      \n\n  //     };\n  //     this.lineGraph.render();\n\n  //   })\n  // }\n\n  renderPieChart(): void {\n    this.getData().subscribe ((data)=> {\n          const categories = ['Institute', 'Foreign', 'Public'];\n          this.graphdata=data;        \n          this.pieChart = {\n            chart: {\n              type: 'pie',\n               width: '55%',\n            },\n            theme: {\n              monochrome: {\n                enabled: true\n              }\n            },\n            series:[this.graphdata.Institute,this.graphdata.Foreign, this.graphdata.Public], \n           labels: categories,            \n          };\n        },\n       );\n     }\n\n     renderPieChart2(): void {\n      this.getData().subscribe ((data)=> {\n        const categories = ['Authorized Capital: '+this.graphdata.AuthorizedCap, 'Paid Up Capital: '+this.graphdata.PaidUpCap];\n            \n            this.graphdata2=data;\n            \n            this.pieChart2 = {\n              chart: {\n                type: 'pie',\n                 width: '70%',\n              },\n              theme: {\n                monochrome: {\n                  enabled: true\n                }\n              },\n              series:[this.graphdata.AuthorizedCap,this.graphdata.PaidUpCap],\n             labels: categories,            \n            };\n          },\n         );\n       }\n\n\n  renderDataTable(): void {\n    this.dtOptions = {\n      searching: false,\n      ordering:  false,\n      \n      columnDefs: [\n        { width: '90em', targets: 0 },\n        { width: '30em', targets: [1, 2, 3, 4, 5] },\n\n      ],\n      \n      columns: [\n        {title: 'Particulars', data: ''},\n        {title: '2022', data: '2022'},\n        {title: '2021', data: '2021'},\n        {title: '2020', data: '2020'},\n        {title: '2019', data: '2019'}, \n        {title: '2018', data: '2018'},\n      ],\n    };\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}