{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as crypto from 'crypto-js';\nlet SignUpComponent = class SignUpComponent {\n  // form: FormGroup;\n  constructor(http) {\n    this.http = http;\n    this.bo = '';\n    this.email = '';\n    this.password = '';\n    this.password2 = '';\n    this.phone = '';\n    this.OTP = '';\n    this.showOtp = false;\n    this.showPhone = true;\n    this.verifyOtp = true;\n    this.verified = false;\n    this.baseUrl = 'http://localhost:4000/api/checkBO/';\n    this.baseUrl1 = 'http://localhost:4000/api/checkotp/';\n    this.baseUrl2 = 'http://localhost:4000/api/createAccount/';\n  }\n  // ngOnInit() {\n  //   this.form = this.formBuilder.group({\n  //     email: [null, [Validators.required, Validators.email]],\n  //     password: [null, Validators.required],\n  //   });\n  // }\n  checkBO() {\n    this.http.post(this.baseUrl, {\n      phone: this.phone,\n      bo: this.bo\n    }).subscribe(res => {\n      alert(res);\n      if (res == \"BO account is already registered\" || res == \"BO account does not exist\" || res == \"Phone number does not match\") {\n        alert(res);\n      } else {\n        this.showOtp = true;\n        this.checkOtp();\n      }\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n  checkOtp() {\n    this.http.post(this.baseUrl1, {\n      otp: this.OTP\n    }).subscribe({\n      next: res => {\n        if (res == \"1\") {\n          this.verified = true;\n        } else {\n          alert(\"OTP does not match\");\n          this.verifyOtp = false;\n        }\n      },\n      error: e => {\n        console.log('Error:', e);\n      }\n    });\n  }\n  matchPassword() {\n    if (this.password == this.password2) {\n      let hash = crypto.SHA256(this.password).toString();\n      console.log(hash);\n      const data = {\n        bo: this.bo,\n        phone: this.phone,\n        password: hash\n      };\n      this.http.post(this.baseUrl2, data).subscribe(response => {\n        if (response == \"Registered Successfully\") {\n          alert('Sign up successful');\n        } else {\n          alert('Sign up failed: ' + response.error);\n        }\n      });\n    } else {\n      alert('Password does not match.');\n    }\n  }\n};\nSignUpComponent = __decorate([Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})], SignUpComponent);\nexport { SignUpComponent };","map":{"version":3,"mappings":"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","names":["Component","crypto","SignUpComponent","constructor","http","checkBO","post","baseUrl","phone","bo","subscribe","res","alert","showOtp","checkOtp","error","console","baseUrl1","otp","OTP","next","verified","verifyOtp","e","log","matchPassword","password","password2","hash","SHA256","toString","data","baseUrl2","response","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Codes\\semester 5\\stockTech_frontend\\src\\app\\components\\sign-up\\sign-up.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as crypto from 'crypto-js';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\n\nexport class SignUpComponent {\n  bo: string = '';\n  email: string = '';\n  password: string = '';\n  password2: string = '';\n  phone: string = '';\n  OTP: string = '';\n  showOtp: boolean = false;\n  showPhone: boolean = true;\n  verifyOtp: boolean = true;\n  verified: boolean = false;\n\n\n  baseUrl = 'http://localhost:4000/api/checkBO/';\n  baseUrl1 = 'http://localhost:4000/api/checkotp/';\n  baseUrl2 = 'http://localhost:4000/api/createAccount/';\n\n  // form: FormGroup;\n  constructor(private http: HttpClient) { }\n\n  // ngOnInit() {\n  //   this.form = this.formBuilder.group({\n  //     email: [null, [Validators.required, Validators.email]],\n  //     password: [null, Validators.required],\n  //   });\n  // }\n\n  checkBO() {\n    this.http.post(this.baseUrl, { phone: this.phone,bo:this.bo }).subscribe(\n      (res) => {\n        alert(res);\n        if((res==\"BO account is already registered\")||(res==\"BO account does not exist\")||(res==\"Phone number does not match\")){\n          alert(res);\n        }\n        else{\n        this.showOtp = true;\n        this.checkOtp();}\n      },\n      (error) => {\n        console.error('Error:', error);\n      }\n    );\n  }\n\n  checkOtp() {\n    this.http.post(this.baseUrl1, { otp: this.OTP }).subscribe({\n      next: (res) => {\n        if (res == \"1\") {\n          this.verified = true;\n        }\n        else { \n          alert(\"OTP does not match\");\n          this.verifyOtp = false; }\n      },\n      error: (e) => {\n        console.log('Error:', e);\n      }\n    });\n  }\n\n  matchPassword() {\n    if (this.password == this.password2) {\n      let hash = crypto.SHA256(this.password).toString();\n      console.log(hash);\n      const data = { bo: this.bo, phone: this.phone, password: hash };\n      this.http.post(this.baseUrl2, data)\n        .subscribe((response: any) => {\n          if (response == \"Registered Successfully\") {\n            alert('Sign up successful');\n          } else {\n            alert('Sign up failed: ' + response.error);\n          }\n        });\n    }\n    else {\n      alert('Password does not match.');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}